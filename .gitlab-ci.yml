variables:
    # Use a shallow clone depth to speed up the CI build.
    # See: https://docs.gitlab.com/ee/ci/large_repositories/
    BUILD_NAME: Traffic3D
    GIT_DEPTH: 10
    DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE"
    DOCKER_BUILD_ARGS: BUILDKIT_INLINE_CACHE=1
    RELEASE_TAG: "latest"
    FEATURE_BRANCH_TAG: $CI_COMMIT_REF_SLUG


cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$BUILD_TARGET"
    paths:
        - $BUILD_NAME/Library/

stages:
    - prepare
    - lint
    - test
    - build
    - benchmark
    - release

workflow:
    rules:
        - if: $CI_MERGE_REQUEST_ID
          when: never
        - if: $CI_COMMIT_TAG
          when: never
        - when: always

meta-build-image:
    stage: prepare
    image: docker:stable
    variables:
        DOCKER_TLS_CERTDIR: ""
    services:
        - docker:dind
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - cd .meta
        # Note that, unlike $BUILD_NAME, $PROJECT_NAME is lowercase, and so
        # won't cause Docker to error with:
        #     invalid reference format: repository name must be lowercase
        - docker build -t $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG --build-arg $DOCKER_BUILD_ARGS .
        - docker push $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG
    rules:
        - changes:
              - .gitlab-ci.yml
              - .meta/Dockerfile
          when: always
        - when: never
    tags:
        - shared

.unity_before_script: &unity_before_script
    before_script:
        - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

lint:
    stage: lint
    image: ruby:2.6
    before_script:
        - gem install mdl
    script:
        - git ls-files -z '*.md' | xargs -0 mdl --style .mdl.rb
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never
        - when: always
    tags:
        - shared

.test: &test
    image: $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG
    stage: test
    <<: *unity_before_script
    script:
        - chmod +x ./ci/test.sh && ./ci/test.sh
    artifacts:
        name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$TEST_PLATFORM-results"
        when: always
        paths:
            - $(pwd)/$TEST_PLATFORM-results.xml
    rules:
        - if: $CI_COMMIT_TAG
          when: never
        - when: always
    tags:
        - shared

test-playmode:
    <<: *test
    variables:
        TEST_PLATFORM: playmode

test-editmode:
    <<: *test
    variables:
        TEST_PLATFORM: editmode


.build: &build
    image: $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG
    stage: build
    <<: *unity_before_script
    script:
        - chmod +x ./ci/build.sh && ./ci/build.sh
    parallel:
        matrix:
            - BUILD_TARGET:
                  - StandaloneLinux64
                  - StandaloneOSX
                  - StandaloneWindows64
    tags:
        - shared

build:feature-branch:
    <<: *build
    artifacts:
        paths:
            - ./$BUILD_NAME/Builds/
        expire_in: 1 week
    rules:
        - if: $CI_COMMIT_TAG
          when: never
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never
        - when: on_success

build:master:
    <<: *build
    artifacts:
        paths:
            - ./$BUILD_NAME/Builds/
        expire_in: never
    rules:
        - if: $CI_COMMIT_TAG
          when: never
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: always
        - when: never

benchmark:
    stage: benchmark
    image: $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG
    <<: *unity_before_script
    dependencies:
        - build:feature-branch
    script:
        - chmod +x ./ci/benchmark.sh && ./ci/benchmark.sh
    rules:
        - when: manual
    allow_failure: true
    tags:
        - shared

release:dockerimage:
    stage: release
    image: docker:stable
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - cd .meta
        - docker pull $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG
        - docker tag $DOCKER_IMAGE_NAME:$FEATURE_BRANCH_TAG $DOCKER_IMAGE_NAME:$RELEASE_TAG
        - docker push $DOCKER_IMAGE_NAME:RELEASE_TAG
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: on_success
        - if: '$CI_COMMIT_BRANCH == "develop"'
          when: on_success
        - when: never
